[{"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/index.js":"1","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/HomePage.js":"2","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/PlayersPage.js":"3","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/fetcher.js":"4","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/components/MenuBar.js":"5","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/TeamsPage.js":"6","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/GamesPage.js":"7"},{"size":925,"mtime":1670880675420,"results":"8","hashOfConfig":"9"},{"size":5802,"mtime":1670962085052,"results":"10","hashOfConfig":"9"},{"size":15149,"mtime":1670967405754,"results":"11","hashOfConfig":"9"},{"size":3845,"mtime":1670967320675,"results":"12","hashOfConfig":"9"},{"size":1001,"mtime":1670858502906,"results":"13","hashOfConfig":"9"},{"size":9626,"mtime":1670970475527,"results":"14","hashOfConfig":"9"},{"size":12334,"mtime":1670880770245,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"j71e05",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/index.js",[],["34","35"],"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/HomePage.js",["36"],"import React from 'react';\nimport {\n  Table,\n  Pagination,\n  Select\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { getAllGames, getAllTeams} from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n\nconst playerColumns = [\n  {\n    title: 'Name',\n    dataIndex: 'Name',\n    key: 'Name',\n    sorter: (a, b) => a.Name.localeCompare(b.Name),\n    render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\n  },\n  {\n    title: 'Nationality',\n    dataIndex: 'Nationality',\n    key: 'Nationality',\n    sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\n  },\n  {\n    title: 'Rating',\n    dataIndex: 'Rating',\n    key: 'Rating',\n    sorter: (a, b) => a.Rating - b.Rating\n  },\n  // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\n  {\n    title: 'Potential',\n    dataIndex: 'Potential',\n    key: 'Potential',\n    sorter: (a, b) => a.Potential - b.Potential\n  },\n  // TASK 8: add a column for Club, with the ability to (alphabetically) sort \n  {\n    title: 'Club',\n    dataIndex: 'Club',\n    key: 'Club',\n    sorter: (a, b) => a.Club.localeCompare(b.Club)\n  },\n  // TASK 9: add a column for Value - no sorting required\n  {\n    title: 'Value',\n    dataIndex: 'Value',\n    key: 'Value',\n  }\n];\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      gamesResults:[],\n      teamsResults:[],\n      \n      matchesResults: [],\n      matchesPageNumber: 1,\n      matchesPageSize: 10,\n      playersResults: [],\n      pagination: null\n\n    }\n\n    //--\n    this.seasonOnChange = this.seasonOnChange.bind(this)\n    this.goToGame = this.goToGame.bind(this)\n    this.goToTeam = this.goToTeam.bind(this)\n  }\n\n  // Click components\n  goToGame(gameId) {\n    window.location = `/games?id=${gameId}`\n  }\n\n  goToTeam(teamId) {\n    window.location = `/teams?id=${teamId}`\n  }\n\n  // Season change component\n  seasonOnChange(value) {\n    getAllGames(null,null,value).then(res=>{\n      this.setState({ gamesResults: res.results })\n    })\n  }\n  \n  // Mounting components\n  componentDidMount() {\n    getAllTeams(null, null).then(res => {\n      this.setState({ teamsResults: res.results })\n    })\n\n    getAllGames(null, null, 2021).then(res => {\n      this.setState({ gamesResults: res.results })\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        <MenuBar />\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n          <h3>Players</h3>\n          <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n        </div>\n\n        {/* Teams table */}\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n          <h3>Teams</h3>\n          <Table onRow={(record, rowIndex) => {\n            return {\n              onClick: event => {this.goToTeam(record.TeamId)}, // clicking a row takes the user to a detailed view of the match in the /games page using the MatchId parameter  \n            };\n          }} dataSource={this.state.teamsResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n                  <Column title=\"Name\" dataIndex=\"name\" key=\"name\" sorter= {(a, b) => a.name.localeCompare(b.name)}/>\n                  <Column title=\"Abbreviation\" dataIndex=\"abb\" key=\"abb\" sorter= {(a, b) => a.abb.localeCompare(b.abb)}/>\n                  <Column title=\"Year Founded\" dataIndex=\"year\" key=\"year\" sorter= {(a, b) => a.year > b.year }/>\n                  <Column title=\"Home Arena\" dataIndex=\"arena\" key=\"arena\" sorter= {(a, b) => a.arena > b.arena}/>\n              </Table>\n        </div>\n        \n        {/* ---Games table--- */}\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}> \n          <h3>Games</h3>\n          <Select defaultValue=\"2021\" style={{ width: 120 }} onChange={this.seasonOnChange}>\n            <Option value=\"2021\">2021</Option>\n            <Option value=\"2020\">2020</Option>\n            <Option value=\"2019\">2019</Option>\n            <Option value=\"2018\">2018</Option>\n            <Option value=\"2017\">2017</Option>\n            <Option value=\"2016\">2016</Option>\n            <Option value=\"2015\">2015</Option>\n            <Option value=\"2014\">2014</Option>\n            <Option value=\"2013\">2013</Option>\n            <Option value=\"2012\">2012</Option>\n            <Option value=\"2011\">2011</Option>\n            <Option value=\"2010\">2010</Option>\n          </Select>\n          \n          <Table onRow={(record, rowIndex) => {\n            return {\n                onClick: event => {this.goToGame(record.GameId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n              };\n            }} dataSource={this.state.gamesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n                      <ColumnGroup title=\"Teams\">\n                        <Column title=\"Home\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\n                        <Column title=\"Visitor\" dataIndex=\"Visitor\" key=\"Visitor\" sorter= {(a, b) => a.Visitor.localeCompare(b.Visitor)}/>\n                      </ColumnGroup>\n                      <ColumnGroup title=\"Points\">\n                        <Column title=\"HomePts\" dataIndex=\"PTS_home\" key=\"PTS_home\" sorter= {(a, b) => a.PTS_home > b.PTS_home }/>\n                        <Column title=\"VisitorPts\" dataIndex=\"PTS_away\" key=\"PTS_away\" sorter= {(a, b) => a.PTS_away > b.PTS_away}/>\n                      </ColumnGroup>\n                      <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\n            </Table>\n\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default HomePage\n\n","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/PlayersPage.js",["37","38","39","40","41","42","43","44","45"],"import React from 'react';\r\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\r\nimport MenuBar from '../components/MenuBar';\r\nimport { getPlayerSearch, getPlayer } from '../fetcher'\r\nimport {\r\n    Table,\r\n    Pagination,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Divider,\r\n    Slider,\r\n    Rate \r\n} from 'antd'\r\nimport { RadarChart } from 'react-vis';\r\nimport { format } from 'd3-format';\r\nconst { Column, ColumnGroup } = Table;\r\n\r\n\r\n\r\n\r\nconst wideFormat = format('.3r');\r\n\r\nconst playerColumns = [\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'Name',\r\n        key: 'Name',\r\n        sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n        render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\r\n    },\r\n    {\r\n        title: 'Team',\r\n        dataIndex: 'Team',\r\n        key: 'Team',\r\n        sorter: (a, b) => a.Team.localeCompare(b.Team)\r\n    },\r\n    {\r\n        title: 'Season',\r\n        dataIndex: 'Season',\r\n        key: 'Season',\r\n        sorter: (a, b) => a.Season - b.Season\r\n    },\r\n    {\r\n        title: 'pts',\r\n        dataIndex: 'pts',\r\n        key: 'pts',\r\n        sorter: (a, b) => a.pts - b.pts\r\n    },\r\n    {\r\n        title: 'AST',\r\n        dataIndex: 'AST',\r\n        key: 'AST',\r\n        sorter: (a, b) => a.AST - b.AST\r\n    },{\r\n        title: 'REB',\r\n        dataIndex: 'REB',\r\n        key: 'REB',\r\n        sorter: (a, b) => a.REB - b.REB\r\n    },\r\n];\r\n\r\n\r\nclass PlayersPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            nameQuery: '',\r\n            teamQuery: '',\r\n            seasonQuery: '',\r\n            ptsQuery: '',\r\n            atsQuery: '',\r\n            rbsQuery: '',\r\n            selectedPlayerId: window.location.search ? window.location.search.substring(1).split('=')[1] : 201166,\r\n            selectedPlayerDetails: null,\r\n            playersResults: []\r\n        }\r\n\r\n        this.updateSearchResults = this.updateSearchResults.bind(this)\r\n        this.handleNameQueryChange = this.handleNameQueryChange.bind(this)\r\n        this.handleSeasonQueryChange = this.handleSeasonQueryChange.bind(this)\r\n        this.handleTeamQueryChange = this.handleTeamQueryChange.bind(this)\r\n\r\n        this.goToPlayer = this.goToPlayer.bind(this)\r\n    }\r\n\r\n    \r\n\r\n    handleNameQueryChange(event) {\r\n        this.setState({ nameQuery: event.target.value })\r\n    }\r\n\r\n    handleSeasonQueryChange(event) {\r\n        // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\r\n        this.setState({ seasonQuery: event.target.value })\r\n    }\r\n\r\n    handleTeamQueryChange(event) {\r\n        // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\r\n        this.setState({ teamQuery: event.target.value })\r\n    }\r\n\r\n    goToPlayer(playerName) {\r\n        window.location = `/players?bame=${playerName}`\r\n    }\r\n\r\n    updateSearchResults() {\r\n        //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\r\n        getPlayerSearch(this.state.nameQuery, this.state.teamQuery, this.state.seasonQuery, null, null).then(res => {\r\n            this.setState({ playersResults: res.results })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        getPlayerSearch(this.state.nameQuery, this.state.teamQuery, this.state.seasonQuery, null, null).then(res => {\r\n            this.setState({ playersResults: res.results })\r\n        })\r\n\r\n        // TASK 25: call getPlayer with the appropriate parameter and set update the correct state variable. \r\n        // See the usage of getMatch in the componentDidMount method of MatchesPage for a hint! \r\n        getPlayer(this.state.selectedPlayerId).then(res => {\r\n            this.setState({ selectedPlayerDetails: res.results[0] })        \r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n\r\n                <MenuBar />\r\n                <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\r\n                    <Row>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Name</label>\r\n                            <FormInput placeholder=\"Name\" value={this.state.nameQuery} onChange={this.handleNameQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Team Name</label>\r\n                            <FormInput placeholder=\"Team\" value={this.state.teamQuery} onChange={this.handleTeamQueryChange} />\r\n                        </FormGroup></Col>\r\n                        {/* TASK 26: Create a column for Club, using the elements and style we followed in the above two columns. Use the onChange method (handleClubQueryChange)  */}\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Season</label>\r\n                            <FormInput placeholder=\"Season\" value={this.state.seasonQuery} onChange={this.handleSeasonQueryChange} />\r\n                        </FormGroup></Col>\r\n\r\n                    </Row>\r\n\r\n\r\n                </Form>\r\n                <Divider />\r\n                {/* <Table onRow={(record, rowIndex) => {\r\n                    return {\r\n                        onClick: event => {this.goToPlayer(record.PlayerName)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n                    };\r\n                    }} dataSource={this.state.playersResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n    \r\n                            <Column title=\"Name\" dataIndex=\"Name\" key=\"Name\" sorter= {(a, b) => a.Name.localeCompare(b.Name)}/>\r\n                            <Column title=\"Team\" dataIndex=\"Team\" key=\"Team\" sorter= {(a, b) => a.Team.localeCompare(b.Team)}/>\r\n                            <Column title=\"pts\" dataIndex=\"pts\" key=\"pts\" sorter= {(a, b) => a.pts > b.pts }/>\r\n                            <Column title=\"pts\" dataIndex=\"ats\" key=\"ats\" sorter= {(a, b) => a.ats > b.ats }/>\r\n                            <Column title=\"rbs\" dataIndex=\"rbs\" key=\"rbs\" sorter= {(a, b) => a.rbs > b.rbs }/>\r\n                </Table> */}\r\n                <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }} style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}/>\r\n                <Divider />\r\n\r\n                {this.state.selectedPlayerDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n                    <Card>\r\n                    \r\n                        <CardBody>\r\n                        <Row gutter='30' align='middle' justify='center'>\r\n                            <Col flex={2} style={{ textAlign: 'left' }}>\r\n                            <h3>{this.state.selectedPlayerDetails.Name}</h3>\r\n\r\n                            </Col>\r\n\r\n                            <Col flex={2} style={{ textAlign: 'right' }}>\r\n                            <img src={this.state.selectedPlayerDetails.Photo} referrerpolicy=\"no-referrer\" alt={null} style={{height:'15vh'}}/>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                            <Row gutter='30' align='middle' justify='left'>\r\n                                <Col>\r\n                                <h5>{this.state.selectedPlayerDetails.Club}</h5>\r\n                                </Col>\r\n                                <Col>\r\n                                <h5>{this.state.selectedPlayerDetails.JerseyNumber}</h5>\r\n                                </Col>\r\n                                <Col>\r\n                                <h5>{this.state.selectedPlayerDetails.BestPosition}</h5>\r\n                                </Col>\r\n                            </Row>\r\n                            <br>\r\n                            </br>\r\n                            <Row gutter='30' align='middle' justify='left'>\r\n                                <Col>\r\n                                Age: {this.state.selectedPlayerDetails.Age}\r\n                                </Col>\r\n                                {/* TASK 28: add two more columns here for Height and Weight, with the appropriate labels as above */}\r\n                                <Col>\r\n                                Height: {this.state.selectedPlayerDetails.Height}\r\n                                </Col>\r\n                                <Col>\r\n                                Weight: {this.state.selectedPlayerDetails.Weight}\r\n                                </Col>\r\n\r\n                                <Col flex={2} style={{ textAlign: 'right' }}>\r\n                                {this.state.selectedPlayerDetails.Nationality}\r\n                                    <img src={this.state.selectedPlayerDetails.Flag} referrerpolicy=\"no-referrer\" alt={null} style={{height:'3vh', marginLeft: '1vw'}}/>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='left'>\r\n                                <Col>\r\n                                Value: {this.state.selectedPlayerDetails.Value}\r\n                                </Col>\r\n                                <Col>\r\n                                Release Clause: {this.state.selectedPlayerDetails.ReleaseClause}\r\n                                </Col>\r\n                                {/* TASK 29: Create 2 additional columns for the attributes 'Wage' and 'Contract Valid Until' (use spaces between the words when labelling!) */}\r\n                                <Col>\r\n                                Wage: {this.state.selectedPlayerDetails.Wage}\r\n                                </Col>\r\n                                <Col>\r\n                                Contract Valid Until: {this.state.selectedPlayerDetails.ContractValidUntil}\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n\r\n                    </Card>\r\n\r\n                    <Card style={{marginTop: '2vh'}}>\r\n                        <CardBody>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                            <Col flex={2} style={{ textAlign: 'left' }}>\r\n                            <h6>Skill</h6>\r\n                            <Rate disabled defaultValue={this.state.selectedPlayerDetails.Skill} />\r\n                            <h6>Reputation</h6>\r\n                            {/* TASK 30: create a star rating component for 'InternationalReputation'. Make sure you use the 'disabled' option as above to ensure it is read-only*/}\r\n                            <Rate disabled defaultValue={this.state.selectedPlayerDetails.InternationalReputation} />\r\n\r\n                            <Divider/>\r\n                            <h6>Best Rating</h6>\r\n                                <Progress style={{ width: '20vw'}} value={this.state.selectedPlayerDetails.BestOverallRating} >{this.state.selectedPlayerDetails.BestOverallRating}</Progress>\r\n                                {/* TASK 31: create the headings and progress bars for 'Potential' and 'Rating'. Use the same style as the one above for 'Best Rating'.*/}\r\n                            <h6>Potential</h6>\r\n                                <Progress style={{ width: '20vw'}} value={this.state.selectedPlayerDetails.Potential} >{this.state.selectedPlayerDetails.Potential}</Progress>\r\n                            <h6>Rating</h6>\r\n                                <Progress style={{ width: '20vw'}} value={this.state.selectedPlayerDetails.Rating} >{this.state.selectedPlayerDetails.Rating}</Progress>\r\n                                </Col >\r\n                                <Col  push={2} flex={2}>\r\n                                {/*TASK 32: In case the player is a GK, show a radar chart (replacing 'null' below) with the labels: Agility, Ball Control, Passing, Positioning, Stamina, Strength */}\r\n\r\n                                    {this.state.selectedPlayerDetails.BestPosition === 'GK'?\r\n                                        <RadarChart\r\n                                            data={[this.state.selectedPlayerDetails]}\r\n                                            tickFormat={t => wideFormat(t)}\r\n                                            startingAngle={0}\r\n                                            domains={[\r\n                                                { name: 'Penalties', domain: [0, 100], getValue: d => d.GKPenalties },\r\n                                                { name: 'Diving', domain: [0, 100], getValue: d => d.GKDiving },\r\n                                                { name: 'Handling', domain: [0, 100], getValue: d => d.GKHandling },\r\n                                                { name: 'Kicking', domain: [0, 100], getValue: d => d.GKKicking },\r\n                                                { name: 'Positioning', domain: [0, 100], getValue: d => d.GKPositioning },\r\n                                                { name: 'Reflexes', domain: [0, 100], getValue: d => d.GKReflexes }\r\n                                            ]}\r\n                                            width={450}\r\n                                            height={400}\r\n                                        />\r\n                                        :\r\n                                        <RadarChart\r\n                                            data={[this.state.selectedPlayerDetails]}\r\n                                            tickFormat={t => wideFormat(t)}\r\n                                            startingAngle={0}\r\n                                            domains={[\r\n                                                { name: 'Agility', domain: [0, 100], getValue: d => d.NAdjustedAgility },\r\n                                                { name: 'Ball Control', domain: [0, 100], getValue: d => d.NBallControl },\r\n                                                { name: 'Passing', domain: [0, 100], getValue: d => d.NPassing },\r\n                                                { name: 'Positioning', domain: [0, 100], getValue: d => d.NPositioning },\r\n                                                { name: 'Stamina', domain: [0, 100], getValue: d => d.NStamina },\r\n                                                { name: 'Strength', domain: [0, 100], getValue: d => d.NStrength }\r\n                                            ]}\r\n                                            width={450}\r\n                                            height={400}\r\n                                    \r\n                                        />}\r\n                                \r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n\r\n                </div> : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayersPage\r\n\r\n","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/fetcher.js",[],"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/components/MenuBar.js",[],"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/TeamsPage.js",["46","47","48","49","50","51","52","53","54","55","56"],"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/GamesPage.js",["57"],"import React from 'react';\r\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\r\n\r\n\r\nimport {\r\n    Table,\r\n    Pagination,\r\n    Row,\r\n    Col,\r\n    Divider,\r\n\r\n} from 'antd'\r\n\r\n// import { getMatchSearch, getMatch } from '../fetcher'\r\nimport { getGameSearch, getGame } from '../fetcher'\r\n\r\n\r\nimport MenuBar from '../components/MenuBar';\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\n\r\nclass GamesPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            awayQuery: \"\",\r\n            homeQuery: \"\",\r\n            seasonQuery: \"\",\r\n            gamesResults: [],\r\n            selectedGameId: window.location.search ? window.location.search.substring(1).split('=')[1] : 0,\r\n            selectedGameDetails: null\r\n\r\n        }\r\n\r\n        this.handleAwayQueryChange = this.handleAwayQueryChange.bind(this)\r\n        this.handleHomeQueryChange = this.handleHomeQueryChange.bind(this)\r\n        this.handleSeasonQueryChange = this.handleSeasonQueryChange.bind(this)\r\n        this.updateSearchResults = this.updateSearchResults.bind(this)\r\n\r\n        this.goToGame = this.goToGame.bind(this)\r\n\r\n    }\r\n\r\n\r\n    handleAwayQueryChange(event) {\r\n        this.setState({ awayQuery: event.target.value })\r\n    }\r\n\r\n    handleHomeQueryChange(event) {\r\n        this.setState({ homeQuery: event.target.value })\r\n    }\r\n    \r\n    handleSeasonQueryChange(event) {\r\n        this.setState({ seasonQuery: event.target.value })\r\n    }\r\n\r\n    goToGame(gameId) {\r\n        window.location = `/games?id=${gameId}`\r\n    }\r\n\r\n    updateSearchResults() {\r\n        //TASK 11: call getMatchSearch and update matchesResults in state. See componentDidMount() for a hint\r\n        getGameSearch(this.state.homeQuery, this.state.awayQuery, this.state.seasonQuery).then(res => {\r\n            this.setState({ gamesResults: res.results })\r\n            console.log(res.results)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        getGameSearch(this.state.homeQuery, this.state.awayQuery, this.state.seasonQuery).then(res => {\r\n            this.setState({ gamesResults: res.results })\r\n        })\r\n\r\n        getGame(this.state.selectedGameId).then(res => {\r\n            this.setState({ selectedGameDetails: res.results[0] })\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MenuBar />\r\n                <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\r\n                    <Row>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Home Team</label>\r\n                            <FormInput placeholder=\"Home Team\" value={this.state.homeQuery} onChange={this.handleHomeQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Visitor Team</label>\r\n                            <FormInput placeholder=\"Away Team\" value={this.state.awayQuery} onChange={this.handleAwayQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Season</label>\r\n                            <FormInput placeholder=\"Season\" value={this.state.seasonQuery} onChange={this.handleSeasonQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '10vw' }}>\r\n                            <Button style={{ marginTop: '4vh' }} onClick={this.updateSearchResults}>Search</Button>\r\n                        </FormGroup></Col>\r\n\r\n                    </Row>\r\n\r\n\r\n                </Form>\r\n                <Divider />\r\n                {/* TASK 12: Copy over your implementation of the games table from the home page */}\r\n                <Table onRow={(record, rowIndex) => {\r\n                    return {\r\n                        onClick: event => {this.goToGame(record.GameId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n                    };\r\n                    }} dataSource={this.state.gamesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n                            <ColumnGroup title=\"Teams\">\r\n                                <Column title=\"Home\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\r\n                                <Column title=\"Visitor\" dataIndex=\"Visitor\" key=\"Visitor\" sorter= {(a, b) => a.Visitor.localeCompare(b.Visitor)}/>\r\n                            </ColumnGroup>\r\n                            <ColumnGroup title=\"Points\">\r\n                                <Column title=\"HomePts\" dataIndex=\"PTS_home\" key=\"PTS_home\" sorter= {(a, b) => a.PTS_home > b.PTS_home }/>\r\n                                <Column title=\"VisitorPts\" dataIndex=\"PTS_away\" key=\"PTS_away\" sorter= {(a, b) => a.PTS_away > b.PTS_away}/>\r\n                            </ColumnGroup>\r\n                            {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\r\n                            <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\r\n                    </Table>\r\n                \r\n                <Divider />\r\n                {this.state.selectedGameDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col flex={2} style={{ textAlign: 'left' }}>\r\n                                    <CardTitle>{this.state.selectedGameDetails.Home}</CardTitle>\r\n                                </Col>\r\n                                <Col flex={2} style={{ textAlign: 'center' }}>\r\n                                    {this.state.selectedGameDetails.Date}\r\n                                </Col>\r\n                                {/* TASK 13: Add a column with flex = 2, and text alignment = right to display the name of the away team - similar to column 1 in this row */}\r\n\r\n                                <Col flex={2} style={{ textAlign: 'right' }}>\r\n                                    <CardTitle>{this.state.selectedGameDetails.Visitor}</CardTitle>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h3>{this.state.selectedGameDetails.PTS_home}</h3>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Points\r\n                                </Col >\r\n                                {/* TASK 14: Add a column with span = 9, and text alignment = right to display the # of goals the away team scored - similar 1 in this row */}\r\n\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h3>{this.state.selectedGameDetails.PTS_away}</h3>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* TASK 15: create a row for goals at half time similar to the row for 'Goals' above, but use h5 in place of h3!  */}\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedGameDetails.AST_home}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Assists \r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedGameDetails.AST_away}</h5>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedGameDetails.REB_home}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Rebounds\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedGameDetails.REB_away}</h5>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FG_PCT_home * 100}>{this.state.selectedGameDetails.FG_PCT_home}</Progress>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    FG Accuracy\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    {/* TASK 18: add a progress bar to display the shot accuracy for the away team -  look at the progress bar in column 1 of this row for reference*/}\r\n                                    {/* <Progress value={this.state.selectedMatchDetails.ShotsOnTargetAway * 100 / this.state.selectedMatchDetails.ShotsAway}>{this.state.selectedMatchDetails.ShotsOnTargetAway} / {this.state.selectedMatchDetails.ShotsAway}</Progress> */}\r\n                                    <Progress value={this.state.selectedGameDetails.FG_PCT_away * 100}>{this.state.selectedGameDetails.FG_PCT_away}</Progress>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FG3_PCT_home * 100}>{this.state.selectedGameDetails.FG3_PCT_home}</Progress>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    3 Point FG Accuracy\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FG3_PCT_away * 100}>{this.state.selectedGameDetails.FG3_PCT_away}</Progress>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* TASK 16: add a row for fouls cards - check out the above lines for how we did it for corners */}\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FT_PCT_home * 100}>{this.state.selectedGameDetails.FT_PCT_home}</Progress>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Free Throw Accuracy\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FT_PCT_away * 100}>{this.state.selectedGameDetails.FT_PCT_away}</Progress>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                    \r\n                </div> : null}\r\n                <Divider />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GamesPage\r\n\r\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":4,"column":3,"nodeType":"64","messageId":"65","endLine":4,"endColumn":13},{"ruleId":"62","severity":1,"message":"66","line":2,"column":38,"nodeType":"64","messageId":"65","endLine":2,"endColumn":44},{"ruleId":"62","severity":1,"message":"67","line":2,"column":62,"nodeType":"64","messageId":"65","endLine":2,"endColumn":71},{"ruleId":"62","severity":1,"message":"63","line":7,"column":5,"nodeType":"64","messageId":"65","endLine":7,"endColumn":15},{"ruleId":"62","severity":1,"message":"68","line":8,"column":5,"nodeType":"64","messageId":"65","endLine":8,"endColumn":11},{"ruleId":"62","severity":1,"message":"69","line":12,"column":5,"nodeType":"64","messageId":"65","endLine":12,"endColumn":11},{"ruleId":"62","severity":1,"message":"70","line":17,"column":9,"nodeType":"64","messageId":"65","endLine":17,"endColumn":15},{"ruleId":"62","severity":1,"message":"71","line":17,"column":17,"nodeType":"64","messageId":"65","endLine":17,"endColumn":28},{"ruleId":"72","severity":1,"message":"73","line":179,"column":29,"nodeType":"74","endLine":179,"endColumn":144},{"ruleId":"72","severity":1,"message":"73","line":210,"column":37,"nodeType":"74","endLine":210,"endColumn":169},{"ruleId":"62","severity":1,"message":"75","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":14},{"ruleId":"62","severity":1,"message":"76","line":2,"column":16,"nodeType":"64","messageId":"65","endLine":2,"endColumn":25},{"ruleId":"62","severity":1,"message":"77","line":2,"column":27,"nodeType":"64","messageId":"65","endLine":2,"endColumn":36},{"ruleId":"62","severity":1,"message":"66","line":2,"column":38,"nodeType":"64","messageId":"65","endLine":2,"endColumn":44},{"ruleId":"62","severity":1,"message":"67","line":2,"column":62,"nodeType":"64","messageId":"65","endLine":2,"endColumn":71},{"ruleId":"62","severity":1,"message":"78","line":2,"column":73,"nodeType":"64","messageId":"65","endLine":2,"endColumn":81},{"ruleId":"62","severity":1,"message":"63","line":7,"column":5,"nodeType":"64","messageId":"65","endLine":7,"endColumn":15},{"ruleId":"62","severity":1,"message":"79","line":19,"column":10,"nodeType":"64","messageId":"65","endLine":19,"endColumn":26},{"ruleId":"62","severity":1,"message":"71","line":21,"column":17,"nodeType":"64","messageId":"65","endLine":21,"endColumn":28},{"ruleId":"72","severity":1,"message":"73","line":114,"column":33,"nodeType":"74","endLine":114,"endColumn":144},{"ruleId":"72","severity":1,"message":"73","line":120,"column":33,"nodeType":"74","endLine":120,"endColumn":149},{"ruleId":"62","severity":1,"message":"63","line":7,"column":5,"nodeType":"64","messageId":"65","endLine":7,"endColumn":15},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Pagination' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'CardTitle' is defined but never used.","'Select' is defined but never used.","'Slider' is defined but never used.","'Column' is assigned a value but never used.","'ColumnGroup' is assigned a value but never used.","jsx-a11y/alt-text","Invalid alt value for img. Use alt=\"\" for presentational images.","JSXOpeningElement","'Form' is defined but never used.","'FormInput' is defined but never used.","'FormGroup' is defined but never used.","'Progress' is defined but never used.","'getConfirmLocale' is defined but never used.","no-global-assign","no-unsafe-negation"]
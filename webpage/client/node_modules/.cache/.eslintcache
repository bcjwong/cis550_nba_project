[{"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/index.js":"1","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/GamesPage.js":"2","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/HomePage.js":"3","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/TeamsPage.js":"4","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/PlayersPage.js":"5","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/components/MenuBar.js":"6","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/fetcher.js":"7"},{"size":924,"mtime":1671079838589,"results":"8","hashOfConfig":"9"},{"size":12343,"mtime":1671165560749,"results":"10","hashOfConfig":"9"},{"size":6152,"mtime":1671164731191,"results":"11","hashOfConfig":"9"},{"size":11784,"mtime":1671219918389,"results":"12","hashOfConfig":"9"},{"size":7803,"mtime":1671026074989,"results":"13","hashOfConfig":"9"},{"size":1001,"mtime":1670858502906,"results":"14","hashOfConfig":"9"},{"size":4406,"mtime":1671163950376,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"j71e05",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/index.js",[],["34","35"],"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/GamesPage.js",["36"],"import React from 'react';\r\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\r\n\r\n\r\nimport {\r\n    Table,\r\n    Pagination,\r\n    Row,\r\n    Col,\r\n    Divider,\r\n\r\n} from 'antd'\r\n\r\n// import { getMatchSearch, getMatch } from '../fetcher'\r\nimport { getGameSearch, getGame } from '../fetcher'\r\n\r\n\r\nimport MenuBar from '../components/MenuBar';\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\n\r\nclass GamesPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            awayQuery: \"\",\r\n            homeQuery: \"\",\r\n            seasonQuery: \"\",\r\n            gamesResults: [],\r\n            selectedGameId: window.location.search ? window.location.search.substring(1).split('=')[1] : 0,\r\n            selectedGameDetails: null\r\n\r\n        }\r\n\r\n        this.handleAwayQueryChange = this.handleAwayQueryChange.bind(this)\r\n        this.handleHomeQueryChange = this.handleHomeQueryChange.bind(this)\r\n        this.handleSeasonQueryChange = this.handleSeasonQueryChange.bind(this)\r\n        this.updateSearchResults = this.updateSearchResults.bind(this)\r\n\r\n        this.goToGame = this.goToGame.bind(this)\r\n\r\n    }\r\n\r\n\r\n    handleAwayQueryChange(event) {\r\n        this.setState({ awayQuery: event.target.value })\r\n    }\r\n\r\n    handleHomeQueryChange(event) {\r\n        this.setState({ homeQuery: event.target.value })\r\n    }\r\n    \r\n    handleSeasonQueryChange(event) {\r\n        this.setState({ seasonQuery: event.target.value })\r\n    }\r\n\r\n    goToGame(gameId) {\r\n        window.location = `/games?id=${gameId}`\r\n    }\r\n\r\n    updateSearchResults() {\r\n        //TASK 11: call getMatchSearch and update matchesResults in state. See componentDidMount() for a hint\r\n        getGameSearch(this.state.homeQuery, this.state.awayQuery, this.state.seasonQuery).then(res => {\r\n            this.setState({ gamesResults: res.results })\r\n            console.log(res.results)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        getGameSearch(this.state.homeQuery, this.state.awayQuery, this.state.seasonQuery).then(res => {\r\n            this.setState({ gamesResults: res.results })\r\n        })\r\n\r\n        getGame(this.state.selectedGameId).then(res => {\r\n            this.setState({ selectedGameDetails: res.results[0] })\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MenuBar />\r\n                <Form style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n                    <Row>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Home Team</label>\r\n                            <FormInput placeholder=\"Home Team\" value={this.state.homeQuery} onChange={this.handleHomeQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Visitor Team</label>\r\n                            <FormInput placeholder=\"Away Team\" value={this.state.awayQuery} onChange={this.handleAwayQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Season</label>\r\n                            <FormInput placeholder=\"Season\" value={this.state.seasonQuery} onChange={this.handleSeasonQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '10vw' }}>\r\n                            <Button style={{ marginTop: '4vh' }} onClick={this.updateSearchResults}>Search</Button>\r\n                        </FormGroup></Col>\r\n\r\n                    </Row>\r\n\r\n\r\n                </Form>\r\n                <Divider />\r\n                <Form style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n                <Table onRow={(record, rowIndex) => {\r\n                    return {\r\n                        onClick: event => {this.goToGame(record.GameId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n                    };\r\n                    }} dataSource={this.state.gamesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n                            <ColumnGroup title=\"Teams\">\r\n                                <Column title=\"Home\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\r\n                                <Column title=\"Visitor\" dataIndex=\"Visitor\" key=\"Visitor\" sorter= {(a, b) => a.Visitor.localeCompare(b.Visitor)}/>\r\n                            </ColumnGroup>\r\n                            <ColumnGroup title=\"Points\">\r\n                                <Column title=\"HomePts\" dataIndex=\"PTS_home\" key=\"PTS_home\" sorter= {(a, b) => a.PTS_home > b.PTS_home }/>\r\n                                <Column title=\"VisitorPts\" dataIndex=\"PTS_away\" key=\"PTS_away\" sorter= {(a, b) => a.PTS_away > b.PTS_away}/>\r\n                            </ColumnGroup>\r\n                            {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\r\n                            <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\r\n                    </Table>\r\n                </Form>\r\n                \r\n                <Divider />\r\n                {this.state.selectedGameDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col flex={2} style={{ textAlign: 'left' }}>\r\n                                    <CardTitle>{this.state.selectedGameDetails.Home}</CardTitle>\r\n                                </Col>\r\n                                <Col flex={2} style={{ textAlign: 'center' }}>\r\n                                    {this.state.selectedGameDetails.Date}\r\n                                </Col>\r\n                                {/* TASK 13: Add a column with flex = 2, and text alignment = right to display the name of the away team - similar to column 1 in this row */}\r\n\r\n                                <Col flex={2} style={{ textAlign: 'right' }}>\r\n                                    <CardTitle>{this.state.selectedGameDetails.Visitor}</CardTitle>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h3>{this.state.selectedGameDetails.PTS_home}</h3>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Points\r\n                                </Col >\r\n                                {/* TASK 14: Add a column with span = 9, and text alignment = right to display the # of goals the away team scored - similar 1 in this row */}\r\n\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h3>{this.state.selectedGameDetails.PTS_away}</h3>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* TASK 15: create a row for goals at half time similar to the row for 'Goals' above, but use h5 in place of h3!  */}\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedGameDetails.AST_home}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Assists \r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedGameDetails.AST_away}</h5>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <h5>{this.state.selectedGameDetails.REB_home}</h5>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Rebounds\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <h5>{this.state.selectedGameDetails.REB_away}</h5>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FG_PCT_home * 100}>{this.state.selectedGameDetails.FG_PCT_home}</Progress>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    FG Accuracy\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    {/* TASK 18: add a progress bar to display the shot accuracy for the away team -  look at the progress bar in column 1 of this row for reference*/}\r\n                                    {/* <Progress value={this.state.selectedMatchDetails.ShotsOnTargetAway * 100 / this.state.selectedMatchDetails.ShotsAway}>{this.state.selectedMatchDetails.ShotsOnTargetAway} / {this.state.selectedMatchDetails.ShotsAway}</Progress> */}\r\n                                    <Progress value={this.state.selectedGameDetails.FG_PCT_away * 100}>{this.state.selectedGameDetails.FG_PCT_away}</Progress>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FG3_PCT_home * 100}>{this.state.selectedGameDetails.FG3_PCT_home}</Progress>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    3 Point FG Accuracy\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FG3_PCT_away * 100}>{this.state.selectedGameDetails.FG3_PCT_away}</Progress>\r\n                                </Col>\r\n                            </Row>\r\n                            {/* TASK 16: add a row for fouls cards - check out the above lines for how we did it for corners */}\r\n                            <Row gutter='30' align='middle' justify='center'>\r\n                                <Col span={9} style={{ textAlign: 'left' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FT_PCT_home * 100}>{this.state.selectedGameDetails.FT_PCT_home}</Progress>\r\n                                </Col >\r\n                                <Col span={6} style={{ textAlign: 'center' }}>\r\n                                    Free Throw Accuracy\r\n                                </Col >\r\n                                <Col span={9} style={{ textAlign: 'right' }}>\r\n                                    <Progress value={this.state.selectedGameDetails.FT_PCT_away * 100}>{this.state.selectedGameDetails.FT_PCT_away}</Progress>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                    \r\n                </div> : null}\r\n                <Divider />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GamesPage\r\n\r\n","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/HomePage.js",["37"],"import React from 'react';\nimport {\n  Table,\n  Pagination,\n  Select\n} from 'antd'\n\nimport MenuBar from '../components/MenuBar';\nimport { getAllGames, getAllTeams, getAllPlayers} from '../fetcher'\nconst { Column, ColumnGroup } = Table;\nconst { Option } = Select;\n\n\nconst playerColumns = [\n  {\n      title: 'Name',\n      dataIndex: 'Name',\n      key: 'Name',\n      sorter: (a, b) => a.Name.localeCompare(b.Name),\n      render: (text, row) => <a href={`/players?id=${row.id}`}>{text}</a>\n  },\n  {\n      title: 'Team',\n      dataIndex: 'Team',\n      key: 'Team',\n      sorter: (a, b) => a.Team.localeCompare(b.Team)\n  },\n  {\n      title: 'Season',\n      dataIndex: 'Season',\n      key: 'Season',\n      sorter: (a, b) => a.Season - b.Season\n  },\n  {\n      title: 'AVG_PTS',\n      dataIndex: 'AVG_PTS',\n      key: 'AVG_PTS',\n      sorter: (a, b) => a.AVG_PTS - b.AVG_PTS\n  },\n  {\n      title: 'AVG_AST',\n      dataIndex: 'AVG_AST',\n      key: 'AVG_AST',\n      sorter: (a, b) => a.AVG_AST - b.AVG_AST\n  },{\n      title: 'AVG_REB',\n      dataIndex: 'AVG_REB',\n      key: 'AVG_REB',\n      sorter: (a, b) => a.AVG_REB - b.AVG_REB\n  },\n];\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      gamesResults:[],\n      teamsResults:[],\n      playersResults: [],\n      \n      matchesResults: [],\n      matchesPageNumber: 1,\n      matchesPageSize: 10,\n      \n      pagination: null\n\n    }\n\n    //--\n    this.seasonOnChange = this.seasonOnChange.bind(this)\n    this.goToGame = this.goToGame.bind(this)\n    this.goToTeam = this.goToTeam.bind(this)\n    this.goToPlayer = this.goToPlayer.bind(this)\n  }\n\n  // Click components\n  goToGame(gameId) {\n    window.location = `/games?id=${gameId}`\n  }\n\n  goToTeam(teamId) {\n    window.location = `/teams?id=${teamId}`\n  }\n\n  goToPlayer(playerName) {\n    window.location = `/players?bame=${playerName}`\n  }\n\n  // Season change component\n  seasonOnChange(value) {\n    getAllGames(null,null,value).then(res=>{\n      this.setState({ gamesResults: res.results })\n    })\n  }\n  \n  // Mounting components\n  componentDidMount() {\n    getAllTeams(null, null).then(res => {\n      this.setState({ teamsResults: res.results })\n    })\n\n    getAllGames(null, null, 2021).then(res => {\n      this.setState({ gamesResults: res.results })\n      \n    })\n\n    getAllPlayers(null, null, 2021).then(res => {\n      this.setState({ playersResults: res.results })\n    })\n  }\n\n  render() {\n\n    return (\n      <div>\n        <MenuBar />\n        {/* Teams table */}\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n          <h3>Players</h3>\n          <Table onRow={(record, rowIndex) => {\n            return {\n              onClick: event => {this.goToPlayer(record.id)}, // clicking a row takes the user to a detailed view of the match in the /games page using the MatchId parameter  \n            };\n          }} dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n                 \n        </div>\n\n        {/* Teams table */}\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n          <h3>Teams</h3>\n          <Table onRow={(record, rowIndex) => {\n            return {\n              onClick: event => {this.goToTeam(record.TeamId)}, // clicking a row takes the user to a detailed view of the match in the /games page using the MatchId parameter  \n            };\n          }} dataSource={this.state.teamsResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n                  <Column title=\"Name\" dataIndex=\"name\" key=\"name\" sorter= {(a, b) => a.name.localeCompare(b.name)}/>\n                  <Column title=\"Abbreviation\" dataIndex=\"abb\" key=\"abb\" sorter= {(a, b) => a.abb.localeCompare(b.abb)}/>\n                  <Column title=\"Year Founded\" dataIndex=\"year\" key=\"year\" sorter= {(a, b) => a.year > b.year }/>\n                  <Column title=\"Home Arena\" dataIndex=\"arena\" key=\"arena\" sorter= {(a, b) => a.arena > b.arena}/>\n              </Table>\n        </div>\n\n        {/* ---Games table--- */}\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}> \n          <h3>Games</h3>\n          <Select defaultValue=\"2021\" style={{ width: 120 }} onChange={this.seasonOnChange}>\n            <Option value=\"2021\">2021</Option>\n            <Option value=\"2020\">2020</Option>\n            <Option value=\"2019\">2019</Option>\n            <Option value=\"2018\">2018</Option>\n            <Option value=\"2017\">2017</Option>\n            <Option value=\"2016\">2016</Option>\n            <Option value=\"2015\">2015</Option>\n            <Option value=\"2014\">2014</Option>\n            <Option value=\"2013\">2013</Option>\n            <Option value=\"2012\">2012</Option>\n            <Option value=\"2011\">2011</Option>\n          </Select>\n          \n          <Table onRow={(record, rowIndex) => {\n            return {\n                onClick: event => {this.goToGame(record.GameId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n              };\n            }} dataSource={this.state.gamesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n                      <ColumnGroup title=\"Teams\">\n                        <Column title=\"Home\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\n                        <Column title=\"Visitor\" dataIndex=\"Visitor\" key=\"Visitor\" sorter= {(a, b) => a.Visitor.localeCompare(b.Visitor)}/>\n                      </ColumnGroup>\n                      <ColumnGroup title=\"Points\">\n                        <Column title=\"HomePts\" dataIndex=\"PTS_home\" key=\"PTS_home\" sorter= {(a, b) => a.PTS_home > b.PTS_home }/>\n                        <Column title=\"VisitorPts\" dataIndex=\"PTS_away\" key=\"PTS_away\" sorter= {(a, b) => a.PTS_away > b.PTS_away}/>\n                      </ColumnGroup>\n                      <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\n            </Table>\n\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default HomePage\n\n","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/TeamsPage.js",["38","39","40","41","42","43","44","45","46","47","48"],"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/pages/PlayersPage.js",["49","50","51","52","53","54","55","56","57","58","59","60"],"import React from 'react';\r\nimport { Form, FormInput, FormGroup, Button, Card, CardBody, CardTitle, Progress } from \"shards-react\";\r\nimport MenuBar from '../components/MenuBar';\r\nimport { getPlayerSearch, getPlayer } from '../fetcher'\r\nimport {\r\n    Table,\r\n    Pagination,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Divider,\r\n    Slider,\r\n    Rate \r\n} from 'antd'\r\nimport { RadarChart } from 'react-vis';\r\nimport { format } from 'd3-format';\r\nconst { Column, ColumnGroup } = Table;\r\n\r\n\r\n\r\n\r\nconst wideFormat = format('.3r');\r\n\r\nconst playerColumns = [\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'Name',\r\n        key: 'Name',\r\n        sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n        render: (text, row) => <a href={`/players?id=${row.id}`}>{text}</a>\r\n    },\r\n    {\r\n        title: 'Team',\r\n        dataIndex: 'Team',\r\n        key: 'Team',\r\n        sorter: (a, b) => a.Team.localeCompare(b.Team)\r\n    },\r\n    {\r\n        title: 'Season',\r\n        dataIndex: 'Season',\r\n        key: 'Season',\r\n        sorter: (a, b) => a.Season - b.Season\r\n    },\r\n    {\r\n        title: 'AVG_PTS',\r\n        dataIndex: 'AVG_PTS',\r\n        key: 'AVG_PTS',\r\n        sorter: (a, b) => a.AVG_PTS - b.AVG_PTS\r\n    },\r\n    {\r\n        title: 'AVG_AST',\r\n        dataIndex: 'AVG_AST',\r\n        key: 'AVG_AST',\r\n        sorter: (a, b) => a.AVG_AST - b.AVG_AST\r\n    },{\r\n        title: 'AVG_REB',\r\n        dataIndex: 'AVG_REB',\r\n        key: 'AVG_REB',\r\n        sorter: (a, b) => a.AVG_REB - b.AVG_REB\r\n    },\r\n];\r\n\r\nconst getPlayerGameDetails = [\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'Name',\r\n        key: 'Name',\r\n        sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n        render: (text, row) => <a href={`/players?id=${row.id}`}>{text}</a>\r\n    },\r\n    {\r\n        title: 'Season',\r\n        dataIndex: 'SEASON',\r\n        key: 'SEASON',\r\n        sorter: (a, b) => a.Season - b.Season\r\n    },\r\n    {\r\n        title: 'Date',\r\n        dataIndex: 'Date',\r\n        key: 'Date',\r\n        sorter: (a, b) => a.Date.localeCompare(b.Date)\r\n    },\r\n    {\r\n        title: 'MIN',\r\n        dataIndex: 'MIN',\r\n        key: 'MIN',\r\n        sorter: (a, b) => a.MIN.localeCompare(b.MIN)\r\n    },\r\n    {\r\n        title: 'FG3_PCT',\r\n        dataIndex: 'FG3_PCT',\r\n        key: 'FG3_PCT',\r\n        sorter: (a, b) => a.FG3_PCT - b.FG3_PCT\r\n    },\r\n    {\r\n        title: 'FG_PCT',\r\n        dataIndex: 'FG_PCT',\r\n        key: 'FG_PCT',\r\n        sorter: (a, b) => a.FG_PCT - b.FG_PCT\r\n    },\r\n    {\r\n        title: 'FT_PCT',\r\n        dataIndex: 'FT_PCT',\r\n        key: 'FT_PCT',\r\n        sorter: (a, b) => a.FT_PCT - b.FT_PCT\r\n    },\r\n    {\r\n        title: 'PTS',\r\n        dataIndex: 'PTS',\r\n        key: 'PTS',\r\n        sorter: (a, b) => a.PTS - b.PTS\r\n    },\r\n    {\r\n        title: 'AST',\r\n        dataIndex: 'AST',\r\n        key: 'AST',\r\n        sorter: (a, b) => a.AST - b.AST\r\n    },\r\n    {\r\n        title: 'REB',\r\n        dataIndex: 'REB',\r\n        key: 'REB',\r\n        sorter: (a, b) => a.REB - b.REB\r\n    }\r\n];\r\n\r\nclass PlayersPage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            nameQuery: '',\r\n            teamQuery: '',\r\n            seasonQuery: '',\r\n            selectedPlayerId: window.location.search ? window.location.search.substring(1).split('=')[1] : 201166,\r\n            selectedPlayerDetails: [],\r\n            playersResults: []\r\n        }\r\n\r\n        this.updateSearchResults = this.updateSearchResults.bind(this)\r\n        this.handleNameQueryChange = this.handleNameQueryChange.bind(this)\r\n        this.handleSeasonQueryChange = this.handleSeasonQueryChange.bind(this)\r\n        this.handleTeamQueryChange = this.handleTeamQueryChange.bind(this)\r\n\r\n        this.goToPlayer = this.goToPlayer.bind(this)\r\n    }\r\n\r\n    \r\n\r\n    handleNameQueryChange(event) {\r\n        this.setState({ nameQuery: event.target.value })\r\n    }\r\n\r\n    handleSeasonQueryChange(event) {\r\n        // TASK 20: update state variables appropriately. See handleNameQueryChange(event) for reference\r\n        this.setState({ seasonQuery: event.target.value })\r\n    }\r\n\r\n    handleTeamQueryChange(event) {\r\n        // TASK 21: update state variables appropriately. See handleNameQueryChange(event) for reference\r\n        this.setState({ teamQuery: event.target.value })\r\n    }\r\n\r\n    goToPlayer(playerName) {\r\n        window.location = `/players?bame=${playerName}`\r\n    }\r\n\r\n    updateSearchResults() {\r\n        //TASK 23: call getPlayerSearch and update playerResults in state. See componentDidMount() for a hint\r\n        getPlayerSearch(this.state.nameQuery, this.state.teamQuery, this.state.seasonQuery, null, null).then(res => {\r\n            this.setState({ playersResults: res.results })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        getPlayerSearch(this.state.nameQuery, this.state.teamQuery, this.state.seasonQuery, null, null).then(res => {\r\n            this.setState({ playersResults: res.results })\r\n        })\r\n\r\n        // TASK 25: call getPlayer with the appropriate parameter and set update the correct state variable. \r\n        // See the usage of getMatch in the componentDidMount method of MatchesPage for a hint! \r\n        getPlayer(this.state.selectedPlayerId, null, null).then(res => {\r\n            this.setState({ selectedPlayerDetails: res.results })        \r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n\r\n                <MenuBar />\r\n                <Form style={{ width: '80vw', margin: '0 auto', marginTop: '5vh' }}>\r\n                    <Row>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Name</label>\r\n                            <FormInput placeholder=\"Name\" value={this.state.nameQuery} onChange={this.handleNameQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Team Name</label>\r\n                            <FormInput placeholder=\"Team\" value={this.state.teamQuery} onChange={this.handleTeamQueryChange} />\r\n                        </FormGroup></Col>\r\n                        {/* TASK 26: Create a column for Club, using the elements and style we followed in the above two columns. Use the onChange method (handleClubQueryChange)  */}\r\n                        <Col flex={2}><FormGroup style={{ width: '20vw', margin: '0 auto' }}>\r\n                            <label>Season</label>\r\n                            <FormInput placeholder=\"Season\" value={this.state.seasonQuery} onChange={this.handleSeasonQueryChange} />\r\n                        </FormGroup></Col>\r\n                        <Col flex={2}><FormGroup style={{ width: '10vw' }}>\r\n                            <Button style={{ marginTop: '4vh' }} onClick={this.updateSearchResults}>Search</Button>\r\n                        </FormGroup></Col>\r\n                    </Row>\r\n\r\n\r\n                </Form>\r\n                <Divider />\r\n                <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }} style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}/>\r\n                <Divider />\r\n\r\n                {this.state.selectedPlayerDetails ? <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n                <h5>Player's Performance</h5>\r\n                <Table dataSource={this.state.selectedPlayerDetails} columns={getPlayerGameDetails} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }} style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}/>\r\n                </div> : null}\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayersPage\r\n\r\n","/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/components/MenuBar.js",[],"/Users/ben/Desktop/CIS550/cis550_nba_project/webpage/client/src/fetcher.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":7,"column":5,"nodeType":"67","messageId":"68","endLine":7,"endColumn":15},{"ruleId":"65","severity":1,"message":"66","line":4,"column":3,"nodeType":"67","messageId":"68","endLine":4,"endColumn":13},{"ruleId":"65","severity":1,"message":"69","line":2,"column":10,"nodeType":"67","messageId":"68","endLine":2,"endColumn":14},{"ruleId":"65","severity":1,"message":"70","line":2,"column":16,"nodeType":"67","messageId":"68","endLine":2,"endColumn":25},{"ruleId":"65","severity":1,"message":"71","line":2,"column":27,"nodeType":"67","messageId":"68","endLine":2,"endColumn":36},{"ruleId":"65","severity":1,"message":"72","line":2,"column":38,"nodeType":"67","messageId":"68","endLine":2,"endColumn":44},{"ruleId":"65","severity":1,"message":"73","line":2,"column":62,"nodeType":"67","messageId":"68","endLine":2,"endColumn":71},{"ruleId":"65","severity":1,"message":"74","line":2,"column":73,"nodeType":"67","messageId":"68","endLine":2,"endColumn":81},{"ruleId":"65","severity":1,"message":"66","line":7,"column":5,"nodeType":"67","messageId":"68","endLine":7,"endColumn":15},{"ruleId":"65","severity":1,"message":"75","line":19,"column":10,"nodeType":"67","messageId":"68","endLine":19,"endColumn":26},{"ruleId":"65","severity":1,"message":"76","line":21,"column":17,"nodeType":"67","messageId":"68","endLine":21,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":154,"column":33,"nodeType":"79","endLine":154,"endColumn":144},{"ruleId":"77","severity":1,"message":"78","line":160,"column":33,"nodeType":"79","endLine":160,"endColumn":149},{"ruleId":"65","severity":1,"message":"80","line":2,"column":46,"nodeType":"67","messageId":"68","endLine":2,"endColumn":50},{"ruleId":"65","severity":1,"message":"81","line":2,"column":52,"nodeType":"67","messageId":"68","endLine":2,"endColumn":60},{"ruleId":"65","severity":1,"message":"73","line":2,"column":62,"nodeType":"67","messageId":"68","endLine":2,"endColumn":71},{"ruleId":"65","severity":1,"message":"74","line":2,"column":73,"nodeType":"67","messageId":"68","endLine":2,"endColumn":81},{"ruleId":"65","severity":1,"message":"66","line":7,"column":5,"nodeType":"67","messageId":"68","endLine":7,"endColumn":15},{"ruleId":"65","severity":1,"message":"82","line":8,"column":5,"nodeType":"67","messageId":"68","endLine":8,"endColumn":11},{"ruleId":"65","severity":1,"message":"83","line":12,"column":5,"nodeType":"67","messageId":"68","endLine":12,"endColumn":11},{"ruleId":"65","severity":1,"message":"84","line":13,"column":5,"nodeType":"67","messageId":"68","endLine":13,"endColumn":9},{"ruleId":"65","severity":1,"message":"85","line":15,"column":10,"nodeType":"67","messageId":"68","endLine":15,"endColumn":20},{"ruleId":"65","severity":1,"message":"86","line":17,"column":9,"nodeType":"67","messageId":"68","endLine":17,"endColumn":15},{"ruleId":"65","severity":1,"message":"76","line":17,"column":17,"nodeType":"67","messageId":"68","endLine":17,"endColumn":28},{"ruleId":"65","severity":1,"message":"87","line":22,"column":7,"nodeType":"67","messageId":"68","endLine":22,"endColumn":17},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'Pagination' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'FormInput' is defined but never used.","'FormGroup' is defined but never used.","'Button' is defined but never used.","'CardTitle' is defined but never used.","'Progress' is defined but never used.","'getConfirmLocale' is defined but never used.","'ColumnGroup' is assigned a value but never used.","jsx-a11y/alt-text","Invalid alt value for img. Use alt=\"\" for presentational images.","JSXOpeningElement","'Card' is defined but never used.","'CardBody' is defined but never used.","'Select' is defined but never used.","'Slider' is defined but never used.","'Rate' is defined but never used.","'RadarChart' is defined but never used.","'Column' is assigned a value but never used.","'wideFormat' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]